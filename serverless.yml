service: image-recognition
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  environment:
    DETECTLABELS_QUEUE_URL: ${self:custom.labelsQueue.url}
    DETECTLABELS_QUEUE_ARN: ${self:custom.labelsQueue.arn}
    DETECTLABELS_QUEUE_NAME: ${self:custom.labelsQueue.name}
    MONGO_URI: ${env:MONGO_URI}
    DEFAULT_AWS_REGION: ${env:AWS_REGION}
    DB_NAME: ${env:DB_NAME}
    BUCKET_NAME: ${env:BUCKET_NAME}
    BUCKET_PREFIX: ${env:BUCKET_PREFIX}
  deploymentBucket:
    name: arun-practice
    maxPreviousDeploymentArtifacts: 5
  deploymentPrefix: lambda
  region: ap-south-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rekognition:DetectLabels
      Resource: "*"
    - Effect: Allow
      Action: 
        - s3:*
      Resource: arn:aws:s3:::arun-practice/*
    - Effect: Allow
      Action:
        - sqs:*
      Resource: ${self:custom.labelsQueue.arn}

resources:
  Resources:
    DetectImageLabelsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.labelsQueue.name}
    

functions:
  api:
    handler: index.handler
    events:
      - httpApi: '*'
  imageProcess:
    handler: src/controllers/processController.detectLabels
    events:
      - sqs: 
          arn: ${self:custom.labelsQueue.arn}
          batchSize: 10
      

custom:
  envVars: ${file(config.js)}
  labelsQueue:
    name: DetectImageLabelsQueue-${self:provider.stage}
    arn: !GetAtt  DetectImageLabelsQueue.Arn
    url: !Ref  DetectImageLabelsQueue
